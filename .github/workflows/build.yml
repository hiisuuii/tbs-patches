name: Build

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle
        run: ./gradlew build
        
      - name: Upload built JAR
        uses: actions/upload-artifact@v4
        with:
          name: built-jar
          path: build/libs/*-all.jar
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && success()
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Extract project version from gradle.properties
      id: get_version
      run: |
        version=$(grep '^mod_version=' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')
        echo "VERSION=$version" >> $GITHUB_ENV
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: Check if release already exists
      id: check_release
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ steps.get_version.outputs.version }})

        if [ "$response" -eq 200 ]; then
          echo "Release already exists for version v${{ steps.get_version.outputs.version }}"
          echo "skip_release=true" >> $GITHUB_OUTPUT
        else
          echo "skip_release=false" >> $GITHUB_OUTPUT
        fi

    - name: Exit if release already exists
      if: steps.check_release.outputs.skip_release == 'true'
      run: |
        echo "Skipping release: version already published."

    - name: Download JAR from build job
      if: steps.check_release.outputs.skip_release == 'false'
      uses: actions/download-artifact@v4
      with:
        name: built-jar
        path: ./jar

    - name: Find JAR file
      if: steps.check_release.outputs.skip_release == 'false'
      id: find_jar
      run: |
        jarfile=$(find ./jar -type f -name "*.jar" | head -n 1)
        echo "jar_path=$jarfile" >> $GITHUB_OUTPUT
        echo "jar_name=$(basename $jarfile)" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      if: steps.check_release.outputs.skip_release == 'false'
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: "v${{ steps.get_version.outputs.version }}"
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload JAR to Release
      if: steps.check_release.outputs.skip_release == 'false'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find_jar.outputs.jar_path }}
        asset_name: ${{ steps.find_jar.outputs.jar_name }}
        asset_content_type: application/java-archive
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

